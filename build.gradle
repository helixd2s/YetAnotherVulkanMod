plugins {
	id 'fabric-loom' version '0.12-SNAPSHOT'
	id 'maven-publish'
	id 'org.bytedeco.gradle-javacpp-build' version "1.5.8-SNAPSHOT"
}

repositories {
	maven {
		url 'https://oss.sonatype.org/content/repositories/snapshots'
	}
}

ext {
	javacppPlatform = 'windows-x86_64' // or any other platform, defaults to Loader.getPlatform()
}

//
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

//
archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

//
project.ext.lwjglVersion = "3.3.1"
project.ext.jomlVersion = "1.10.4"
project.ext.winNatives = "natives-windows"
project.ext.linuxNatives = "natives-linux"

dependencies {
	// our important library!
	include(implementation("org.bytedeco:javacpp:1.5.8-SNAPSHOT"))
	include(implementation("org.bytedeco:javacpp-presets:1.5.8-SNAPSHOT"))
	include(implementation("org.bytedeco:javacpp-platform:1.5.8-SNAPSHOT"))
	include(implementation("org.bytedeco:opencv:4.5.5-1.5.8-SNAPSHOT"))

	//
	include(implementation("org.lwjgl:lwjgl:$lwjglVersion"))
	include(implementation("org.lwjgl:lwjgl-vulkan:$lwjglVersion"))
	include(implementation("org.lwjgl:lwjgl-vma:$lwjglVersion"))
	include(implementation("org.joml:joml:${jomlVersion}"))
	include(runtimeOnly("org.lwjgl:lwjgl-vma:$lwjglVersion:$winNatives"))
	include(runtimeOnly("org.lwjgl:lwjgl-vma:$lwjglVersion:$linuxNatives"))

	//
	include(implementation("org.lwjgl:lwjgl-opengl:$lwjglVersion"))
	include(runtimeOnly("org.lwjgl:lwjgl-opengl:$lwjglVersion:$winNatives"))
	include(runtimeOnly("org.lwjgl:lwjgl-opengl:$lwjglVersion:$linuxNatives"))

	//
	include(implementation("org.lwjgl:lwjgl-glfw:$lwjglVersion"))
	include(runtimeOnly("org.lwjgl:lwjgl-glfw:$lwjglVersion:$winNatives"))
	include(runtimeOnly("org.lwjgl:lwjgl-glfw:$lwjglVersion:$linuxNatives"))
	include(implementation("org.lwjgl:lwjgl-stb:$lwjglVersion"))
	include(runtimeOnly("org.lwjgl:lwjgl-stb:$lwjglVersion:$winNatives"))
	include(runtimeOnly("org.lwjgl:lwjgl-stb:$lwjglVersion:$linuxNatives"))
	include(implementation("org.lwjgl:lwjgl-openal:$lwjglVersion"))
	include(runtimeOnly("org.lwjgl:lwjgl-openal:$lwjglVersion:$winNatives"))
	include(runtimeOnly("org.lwjgl:lwjgl-openal:$lwjglVersion:$linuxNatives"))
	include(runtimeOnly("org.lwjgl:lwjgl:$lwjglVersion:$winNatives"))
	include(runtimeOnly("org.lwjgl:lwjgl:$lwjglVersion:$linuxNatives"))

	//
	include(implementation("org.lwjgl:lwjgl-shaderc:$lwjglVersion"))
	include(runtimeOnly("org.lwjgl:lwjgl-shaderc:$lwjglVersion:$winNatives"))
	include(runtimeOnly("org.lwjgl:lwjgl-shaderc:$lwjglVersion:$linuxNatives"))
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(org.bytedeco.gradle.javacpp.BuildTask) {
	generate = true;
	compile = false;
	outputDirectory = file("$buildDir/../src/main/cpp");
	classOrPackageNames = [
			'org.helixd2s.yavulkanmod.alter.*',
			'org.helixd2s.yavulkanmod.alter.header.*',
			'org.helixd2s.yavulkanmod.alter.objects.*'
	];
}

tasks.withType(Jar).configureEach {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

loom {
	accessWidenerPath = file("src/main/resources/yavulkanmod.accesswidener")
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
